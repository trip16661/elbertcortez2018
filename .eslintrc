{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true
    },
    "extends": [
        "eslint:recommended"
    ],
    "parserOptions": {
        "sourceType": "module"
    },
    "rules": {
        /*
         *   Disallow or enforce spaces inside of brackets
         *   http://eslint.org/docs/rules/array-bracket-spacing
         */
        "array-bracket-spacing": ["error", "always", {
            "arraysInArrays": false,
            "objectsInArrays": false
        }],
        /*
         *   Require Brace Style
         *   http://eslint.org/docs/rules/brace-style
         */
        "brace-style": ["error", "1tbs", {
            "allowSingleLine": true
        }],
        /*
         *   Require Camelcase
         *   http://eslint.org/docs/rules/camelcase
         */
        "camelcase": ["error", {
            "properties": "always"
        }],
        /*
         *   Require or disallow trailing commas 
         *   http://eslint.org/docs/rules/comma-dangle
         */
        "comma-dangle": ["error", "never"],
        /*
         *   Enforces spacing around commas
         *   http://eslint.org/docs/rules/comma-spacing
         */
        "comma-spacing": "error",
        /*
         *   Comma style
         *   http://eslint.org/docs/rules/comma-style
         */
        "comma-style": ["error", "last"],
        /*
         *   Require Dot Notation
         *   http://eslint.org/docs/rules/dot-notation
         */
        "dot-notation": ["error", {
            "allowKeywords": true,
            "allowPattern": "^[a-z]+(_[a-z]+)+$"
        }],
        /*
         *   Require or disallow spacing between function identifiers and their invocations
         *   http://eslint.org/docs/rules/func-call-spacing
         */
        "func-call-spacing": ["error", "never"],
        /*
         *   Enforce consistent spacing between keys and values in object literal properties
         *   http://eslint.org/docs/rules/key-spacing
         */
        "key-spacing": ["error", {
            "beforeColon": false,
            "afterColon": true
        }],
        /*
         *   Enforce consistent spacing before and after keywords 
         *   http://eslint.org/docs/rules/keyword-spacing
         */
        "keyword-spacing": "error",
        /*
         *   Require empty lines around comments
         *   http://eslint.org/docs/rules/lines-around-comment
         */
        "lines-around-comment": ["error", {
            "beforeLineComment": true
        }],
        /*
         *   Disallow mixed spaces and tabs for indentation
         *   http://eslint.org/docs/rules/no-mixed-spaces-and-tabs
         */
        "no-mixed-spaces-and-tabs": ["error", "smart-tabs"],
        /*
         *   Disallow Multiline Strings
         *   http://eslint.org/docs/rules/no-multi-str
         */
        "no-multi-str": "error",
        /*
         *   Disallow multiple empty lines
         *   http://eslint.org/docs/rules/no-multiple-empty-lines
         */
        "no-multiple-empty-lines": ["error", {
            "max": 2,
            "maxBOF": 1
        }],
        /*
         *   Disallow with statements
         *   http://eslint.org/docs/rules/no-with
         */
        "no-with": "error",
        /*
         *   Require or disallow newlines around variable declarations 
         *   http://eslint.org/docs/rules/one-var-declaration-per-line
         */
        "one-var-declaration-per-line": ["error", "initializations"],
        /*
         *   Enforce consistent linebreak style for operators
         *   http://eslint.org/docs/rules/operator-linebreak
         */
        "operator-linebreak": ["error", "none", {
            "overrides": {
                "?": "ignore",
                ":": "ignore"
            }
        }],
        /*
         *   Require or disallow semicolons instead of ASI 
         *   http://eslint.org/docs/rules/semi
         */
        "semi": ["error", "always"],
        /*
         *   Require Or Disallow Space Before Blocks
         *   http://eslint.org/docs/rules/space-before-blocks
         */
        "space-before-blocks": ["error", "always"],
        /*
         *   Enforce consistent spacing before opening parenthesis in function definitions
         *   http://eslint.org/docs/rules/space-before-function-parentheses
         */
        "space-before-function-paren": ["error", "never"],
        /*
         *   Disallow or enforce spaces inside of parentheses
         *   http://eslint.org/docs/rules/space-in-parens
         */
        "space-in-parens": ["error", "always", {
            "exceptions": ["{}", "[]", "empty"]
        }],
        /*
         *   Require spacing around infix operators 
         *   http://eslint.org/docs/rules/space-infix-ops
         */
        "space-infix-ops": "error",
        // Require or disallow spaces before/after unary operators (words on by default, nonwords)
        /*
         *   Require or disallow spaces before/after unary operators 
         *   http://eslint.org/docs/rules/space-unary-ops
         */
        "space-unary-ops": [
            2, {
                "words": true,
                "nonwords": false,
                "overrides": {
                    "!": false
                }
            }
        ],
        /*
         *   Require or disallow Yoda Conditions (yoda) 
         *   http://eslint.org/docs/rules/yoda
         */
        "yoda": ["error", "never"],
        /*
         *   Disallow Unused Expressions
         *   http://eslint.org/docs/rules/no-unused-expressions
         */
        "no-unused-expressions": ["error", {
            "allowTernary": true
        }]
    }
}